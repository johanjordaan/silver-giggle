install.packages("RMariaDB")
source('D:/projects/silver-giggle/db_test.r')
library(DBI)
con <- dbConnect(RMariaDB::MariaDB(), group = "client", default.file=".mysql-creds")
View(con)
View(con)
dbDisconnect(con)
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
dbDisconnect(con)
print(chunk)
source('D:/projects/silver-giggle/db_test.r')
library(DBI)
con <- dbConnect(RMariaDB::MariaDB(),dbname="silver_giggle", group = "client", default.file=".mysql-creds")
res <- dbSendQuery(con, "SELECT * FROM event")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(chunk)
}
dbClearResult(res)
dbDisconnect(con)
source('D:/projects/silver-giggle/db_test.r')
install.packages("flexdashboard")
install.packages("rmarkdown", type = "source")
install.packages("rmarkdown", type = "source")
```{r setup, include=FALSE}
library(shiny)
library(flexdashboard)
library(shiny)
true
TRUE
shiny::runApp('xxx')
---
title: "Untitled"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
runtime: shiny
---
#install.packages("shinydashboard")
source('D:/projects/silver-giggle/db_test.r')
install.packages("shinydashboard")
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
install.packages("config")
install.packages("odbc")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(chunk)
}
conn_args <- config::get("dataconnection")
con <- dbConnect(
odbc::odbc(),
Driver = conn_args$driver,
Server = conn_args$server,
UID    = conn_args$uid,
PWD    = conn_args$pwd,
Port   = conn_args$port,
Database = conn_args$database
)
con <- dbConnect(
odbc::odbc(),
Driver = conn_args$driver,
Server = conn_args$server,
UID    = conn_args$uid,
PWD    = conn_args$pwd,
Port   = conn_args$port,
Database = conn_args$database
)
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
library(DBI)
conn_args <- config::get("dataconnection")
con <- dbConnect(
odbc::odbc(),
Driver = conn_args$driver,
Server = conn_args$server,
UID    = conn_args$uid,
PWD    = conn_args$pwd,
Port   = conn_args$port,
Database = conn_args$database
)
con <- dbConnect(
odbc::odbc(),
Driver = "MySQL",#conn_args$driver,
Server = conn_args$server,
UID    = conn_args$uid,
PWD    = conn_args$pwd,
Port   = conn_args$port,
Database = conn_args$database
)
con <- dbConnect(
odbc::odbc(),
Driver = "RMariaDB",#conn_args$driver,
Server = conn_args$server,
UID    = conn_args$uid,
PWD    = conn_args$pwd,
Port   = conn_args$port,
Database = conn_args$database
)
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
source('D:/projects/silver-giggle/db_test.r')
sort(unique(odbcListDrivers()[[1]]))
sort(unique(odbcListDrivers()[[1]]))
library(DBI)
conn_args <- config::get("dataconnection")
con <- dbConnect(
odbc::odbc(),
Driver = "MySQL",#conn_args$driver,
Server = conn_args$server,
UID    = conn_args$uid,
PWD    = conn_args$pwd,
Port   = conn_args$port,
Database = conn_args$database
)
sort(unique(odbcListDrivers()[[1]]))
library(DBI)
conn_args <- config::get("dataconnection")
con <- dbConnect(
odbc::odbc(),
Driver = "MySQL ODBC 8.0 ANSI Driver",#conn_args$driver,
Server = conn_args$server,
UID    = conn_args$uid,
PWD    = conn_args$pwd,
Port   = conn_args$port,
Database = conn_args$database
)
res <- d
source('D:/projects/silver-giggle/db_test.r')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
runApp('dashboard.R')
